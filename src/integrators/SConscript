Import('env', 'sys', 'plugins')

plugins += env.SharedLibrary('ao', ['direct/ao.cpp'])
plugins += env.SharedLibrary('direct', ['direct/direct.cpp'])
plugins += env.SharedLibrary('path', ['path/path.cpp'])
plugins += env.SharedLibrary('volpath', ['path/volpath.cpp'])
plugins += env.SharedLibrary('volpath_simple', ['path/volpath_simple.cpp'])
plugins += env.SharedLibrary('ptracer', ['ptracer/ptracer.cpp', 'ptracer/ptracer_proc.cpp'])
plugins += env.SharedLibrary('gpt', ['gpt/gpt.cpp', 'gpt/gpt_wr.cpp', 'gpt/gpt_proc.cpp', 'poisson_solver/Solver.cpp', 'poisson_solver/Backend.cpp', 'poisson_solver/BackendOpenMP.cpp', 'poisson_solver/Defs.cpp'])
plugins += env.SharedLibrary('vrl', ['vrl/vrl.cpp', 'vrl/vrl_proc.cpp', 'vrl/vrl_radiance_estimator.cpp'])


# Photon mapping-based techniques
plugins += env.SharedLibrary('photonmapper', ['photonmapper/photonmapper.cpp', 'photonmapper/bre.cpp'])
plugins += env.SharedLibrary('ppm', ['photonmapper/ppm.cpp'])
plugins += env.SharedLibrary('sppm', ['photonmapper/sppm.cpp',  
                                      'photonmapper/beams_accel.cpp',
                                      'photonmapper/beams.cpp',
                                      'photonmapper/photon_proc.cpp',
                                      'photonmapper/bre.cpp',
                                      'photonmapper/plane_accel.cpp'])
							 
# Miscellaneous
plugins += env.SharedLibrary('vpl', ['vpl/vpl.cpp'])
plugins += env.SharedLibrary('adaptive', ['misc/adaptive.cpp'])
plugins += env.SharedLibrary('irrcache', ['misc/irrcache.cpp', 'misc/irrcache_proc.cpp'])
plugins += env.SharedLibrary('multichannel', ['misc/multichannel.cpp'])
plugins += env.SharedLibrary('field', ['misc/field.cpp'])
#plugins += env.SharedLibrary('motion', ['misc/motion.cpp'])

# Average rendering integrator (for pt, bdpt, ...)
plugins += env.SharedLibrary('avg', ['avg.cpp']);

# Bidirectional techniques
bidirEnv = env.Clone()
bidirEnv.Append(LIBS=['mitsuba-bidir'])
bidirEnv.Append(LIBPATH=['#src/libbidir'])


plugins += bidirEnv.SharedLibrary('bdpt',
	['bdpt/bdpt.cpp', 'bdpt/bdpt_wr.cpp', 'bdpt/bdpt_proc.cpp'])

plugins += bidirEnv.SharedLibrary('pssmlt',
	['pssmlt/pssmlt.cpp', 'pssmlt/pssmlt_sampler.cpp',
    'pssmlt/pssmlt_proc.cpp']);

plugins += bidirEnv.SharedLibrary('mlt',
	['mlt/mlt.cpp', 'mlt/mlt_proc.cpp']
)

plugins += bidirEnv.SharedLibrary('erpt',
	['erpt/erpt.cpp', 'erpt/erpt_proc.cpp']
)

plugins += bidirEnv.SharedLibrary('gbdpt', ['gbdpt/gbdpt.cpp', 'gbdpt/gbdpt_wr.cpp', 'gbdpt/gbdpt_proc.cpp', 'poisson_solver/Solver.cpp', 'poisson_solver/Backend.cpp', 'poisson_solver/BackendOpenMP.cpp', 'poisson_solver/Defs.cpp'])
	
# photon mapping implemented on top of bidir framework

plugins += bidirEnv.SharedLibrary('gvpm', [	'photonmapper/gvpm/gvpm.cpp',
											'photonmapper/gvpm/gvpm_proc.cpp',
											'photonmapper/gvpm/gvpm_accel.cpp',										    
											'photonmapper/beams.cpp',
											'photonmapper/beams_accel.cpp',
                                            'photonmapper/plane_accel.cpp',

										# Shifts
																					'photonmapper/gvpm/shift/shift_surface.cpp',
											'photonmapper/gvpm/shift/shift_volume_photon.cpp',
											'photonmapper/gvpm/shift/shift_volume_beams.cpp',
											'photonmapper/gvpm/shift/operation/shift_ME.cpp',
											'photonmapper/gvpm/shift/operation/shift_diffuse.cpp',
											
											'poisson_solver/Solver.cpp',
											'poisson_solver/Backend.cpp',
											'poisson_solver/BackendOpenMP.cpp',
											'poisson_solver/Defs.cpp'])
                                          
Export('plugins')
